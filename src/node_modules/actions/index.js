import {FetchPhonesAPI} from 'api/index'
import {getRenderedPhonesLength} from "selectors";
import {fetchPhoneByIDAPI, loadMorePhonesAPI,fetchCategoriesAPI} from "api";

//action types in const
export  const FETCH_PHONE_LOADING = "FETCH_PHONE_LOADING";
export const FETCH_PHONE_SUCCESS = "FETCH_PHONE_SUCCES";
export const FETCH_PHONE_FAILURE = "FETCH_PHONE_FAIL";
export  const LOAD_MORE_PHONE_LOADING = "LOAD_MORE_PHONE_LOADING";
export const LOAD_MORE_PHONE_SUCCESS = "LOAD_MORE_PHONE_SUCCES";
export const LOAD_MORE_PHONE_FAILURE = "LOAD_MORE_PHONE_FAIL";
export  const FETCH_PHONE_BY_ID_LOADING = "FETCH_PHONE_BY_ID_LOADING";
export const FETCH_PHONE_BY_ID_SUCCESS = "FETCH_PHONE_BY_ID_SUCCES";
export const FETCH_PHONE_BY_ID_FAILURE = "FETCH_PHONE_BY_ID_FAIL";
export const ADD_PHONE_TO_BASKET = "ADD_PHONE_TO_BASKET";
export const SEARCH_PHONE = "SEARCH_PHONE"
export  const FETCH_CATEGORIES_LOADING = "FETCH_CATEGORIES_LOADING";
export  const FETCH_CATEGORIES_SUCCESS = "FETCH_CATEGORIES_SUCCESS";
export  const FETCH_CATEGORIES_FAILURE = "FETCH_CATEGORIES_FAILURE";
export const REMOVE_PHONE_FROM_BASKET ='REMOVE_PHONE_FROM_BASKET';
export const CLEAN_BASKET = 'CLEAN_BASKET'
//functions actions creators
//fetch phone to state
const FetchPhoneAC = {type:FETCH_PHONE_LOADING};
const FetchPhoneScAC =(phones) => ({type:FETCH_PHONE_SUCCESS , payload:phones});
const FetchPhoneFlAC =(err)=> ({type:FETCH_PHONE_FAILURE , payload:err , error:true});
//load more phones to state
const LoadMorePhoneAC = {type:LOAD_MORE_PHONE_LOADING};
const LoadMorePhoneScAC =(phones) => ({type:LOAD_MORE_PHONE_SUCCESS , payload:phones});
const LoadMorePhoneFlAC =(err)=> ({type:LOAD_MORE_PHONE_FAILURE , payload:err , error:true});
//take phone by id and push it to state
const FetchPhoneByIDAC = {type:FETCH_PHONE_BY_ID_LOADING};
const FetchPhoneByIDScAC =(phone) => ({type:FETCH_PHONE_BY_ID_SUCCESS , payload:phone});
const FetchPhoneByIDFlAC =(err)=> ({type:FETCH_PHONE_BY_ID_FAILURE , payload:err , error:true});
//add phone to basket state
const AddPhoneToBasketAC = (id)=>({type:ADD_PHONE_TO_BASKET,payload:id})
//give phone by name
const SeatchPhoneAC = text =>({type:SEARCH_PHONE , payload:text})
//fetch categories
const FetchCategoriesAC = {type:FETCH_CATEGORIES_LOADING}
const FetchCategoriesACsc = categories =>({type:FETCH_CATEGORIES_LOADING,payload:categories})
const FetchCategoriesACfl = err =>({type:FETCH_CATEGORIES_LOADING,payload:err,error:true})

//async func which push phone in state
export let FetchPhones = () => async (dispatch) => {
    dispatch(FetchPhoneAC)
    try {
        let phones = await FetchPhonesAPI();
        dispatch(FetchPhoneScAC(phones))
    } catch (err) {
        dispatch(FetchPhoneFlAC(err))
    }
}
//push more phones in state
export let loadMorePhones = () => async (dispatch,getState) => {
    //start of push new phones
    dispatch(LoadMorePhoneAC);
    try {
        //if we get phones from API
        let phones = await loadMorePhonesAPI();
        dispatch(LoadMorePhoneScAC(phones))
    } catch (err) {
        //catching the error from API
        dispatch(LoadMorePhoneFlAC(err))
    }
}

//take phone by id
export let fetchPhoneByID =(id)=> async (dispatch) => {
    //start to fetch phone by id
    dispatch(FetchPhoneByIDAC)
    try {
        //taking the phone from API
        const phone = await fetchPhoneByIDAPI(id)
        //push phone if we take phones
        dispatch(FetchPhoneByIDScAC(phone))
    }catch (err) {
        //catch error
        dispatch(FetchPhoneByIDFlAC(err))
    }
}

export let addPhoneToBasket = id => dispatch =>{
    //add phone to basket
    dispatch(AddPhoneToBasketAC(id))
}
export let searchPhone = text => dispatch =>{
    //add phone to basket
    dispatch(SeatchPhoneAC(text))
}

export let fetchCategories = () => async (dispatch)=>{
    const categories = await fetchCategoriesAPI()
    dispatch({type:FETCH_CATEGORIES_LOADING,payload:categories})
    /*try {
        //taking the categories from API
        //const categories = await fetchCategoriesAPI()
        //push categories if we take phones
        dispatch(FetchCategoriesACsc(categories))
    }catch (err) {
        //catch error
        dispatch(FetchCategoriesACfl(err))
    }*/
}

export let removePhoneFromBasket = id => dispatch => {
    dispatch({
        type:REMOVE_PHONE_FROM_BASKET ,
        payload :id})
}

export let cleanBasket = () => dispatch =>{
    dispatch({type:CLEAN_BASKET})
}

export let basketCheckout = phone => () =>{
    alert(JSON.stringify(phone))
}